Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

class Solution {
public:
    int lisfun(int index,int prev_ind,vector<int>&nums,vector<vector<int>>&dp)
    {
        if(index==nums.size())  // if i am outof array then return 0
        {
            return 0;
        }
        if(dp[index][prev_ind+1]!=-1)
          return dp[index][prev_ind+1];
        int not_take=lisfun(index+1,prev_ind,nums,dp);
        int take=INT_MIN;
        if(prev_ind==-1 || nums[index]>nums[prev_ind])
        {
            take=1+lisfun(index+1,index,nums,dp);
        }
        return dp[index][prev_ind+1]=max(take,not_take);
    }
    int lengthOfLIS(vector<int>& nums) {
        vector<vector<int>>dp(nums.size()+1,vector<int>(nums.size()+1,0));
        // return lisfun(0,-1,nums,dp); memoization 2d dp
        // base case for tabulation intiallize all with 0
        int n=nums.size();
        for(int index=n-1;index>=0;index--)
        {
        for(int prev_ind=index-1;prev_ind>=-1;prev_ind--)
        {
            int not_take=dp[index+1][prev_ind+1];
             int take=INT_MIN;
         if(prev_ind==-1 || nums[index]>nums[prev_ind])
         {
            take=1+dp[index+1][index+1];
         }

           dp[index][prev_ind+1]=max(take,not_take);
        }
       }
    return dp[0][-1+1];
    }
};